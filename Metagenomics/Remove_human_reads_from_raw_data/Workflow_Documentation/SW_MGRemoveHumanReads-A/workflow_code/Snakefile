############################################################################################
## Snakefile for GeneLab removal of human reads from metagenomic datasets                 ##
## Developed by Michael D. Lee (Mike.Lee@nasa.gov)                                        ##
############################################################################################

import os

configfile: "config.yaml"

########################################
############# General Info #############
########################################

"""
See the corresponding 'config.yaml' file for general use information.
Variables that may need to be adjusted should be changed there, not here.
"""


########################################
#### Reading samples file into list ####
########################################

sample_IDs_file = config["sample_info_file"]
sample_ID_list = [line.strip() for line in open(sample_IDs_file)]

#####################################################
### Creating output and log directories if needed ###
#####################################################

dirs_to_create = [config["output_reads_dir"], config["logs_dir"], config["kraken_outputs"]]

for dir in dirs_to_create:
    try:
        os.mkdir(dir)
    except:
        pass


########################################
############# Rules start ##############
########################################

# primary outputs depend on if single-end or paired-end data
if config["single_end_data"] != "TRUE":
    # all rule if paired-end data 
    rule all:
        input:
            expand(config["output_reads_dir"] + "{ID}{suffix}", ID = sample_ID_list, suffix = [config["R1_out_suffix"], config["R2_out_suffix"]]),
            config["output_reads_dir"] + "Human-read-removal-summary.tsv"

else:
    # all rule if single-end data
    rule all:
        input:
            expand(config["output_reads_dir"] + "{ID}{suffix}", ID = sample_ID_list, suffix = config["output_read_suffix"]),
            config["output_reads_dir"] + "Human-read-removal-summary.tsv"


# kraken rule depends on if single-end or paired-end data
if config["single_end_data"] != "TRUE":
    # kraken rule if paired-end data 
    rule kraken2_PE:
        conda:
            "envs/kraken2.yaml"
        input:
            R1 = config["input_reads_dir"] + "{ID}" + config["input_R1_suffix"],
            R2 = config["input_reads_dir"] + "{ID}" + config["input_R2_suffix"],
            kraken2_db_trigger = config["REF_DB_ROOT_DIR"] + config["kraken2_db_dir"] + "/" + config["KRAKEN2_TRIGGER_FILE"]
        output:
            main = config["kraken_outputs"] + "{ID}-kraken2-output.txt",
            report = config["kraken_outputs"] + "{ID}-kraken2-report.tsv",
            R1 = config["output_reads_dir"] + "{ID}" + config["R1_out_suffix"],
            R2 = config["output_reads_dir"] + "{ID}" + config["R2_out_suffix"],
            summary = config["output_reads_dir"] + "{ID}-removal-info.tmp"
        params:
            reads_out_arg = config["output_reads_dir"] + "{ID}_R#.fastq",
            R1_tmp_out = config["output_reads_dir"] + "{ID}_R_1.fastq",
            R2_tmp_out = config["output_reads_dir"] + "{ID}_R_2.fastq",
            R1_tmp_out_compressed = config["output_reads_dir"] + "{ID}_R_1.fastq.gz",
            R2_tmp_out_compressed = config["output_reads_dir"] + "{ID}_R_2.fastq.gz",
            kraken2_db_dir = config["REF_DB_ROOT_DIR"] + config["kraken2_db_dir"]
        resources:
            cpus = config["num_threads"]
        log:
            config["logs_dir"] + "{ID}-kraken2-run.log"
        shell:
            """
            kraken2 --db {params.kraken2_db_dir} --gzip-compressed --threads {resources.cpus} --use-names --paired --output {output.main} --report {output.report} --unclassified-out {params.reads_out_arg} {input.R1} {input.R2} > {log} 2>&1

            # compressing outputs
            gzip {params.R1_tmp_out}
            gzip {params.R2_tmp_out}

            # renaming files
            mv {params.R1_tmp_out_compressed} {output.R1}
            mv {params.R2_tmp_out_compressed} {output.R2}

            # making summary info
            total_fragments=$(wc -l {output.main} | sed 's/^ *//' | cut -f 1 -d " ")
            fragments_retained=$(grep -w -m 1 "unclassified" {output.report} | cut -f 2)
            perc_removed=$(printf "%.2f\n" $(echo "scale=4; 100 - ${{fragments_retained}} / ${{total_fragments}} * 100" | bc -l))

            printf "{wildcards.ID}\t${{total_fragments}}\t${{fragments_retained}}\t${{perc_removed}}\n" > {output.summary}
            """

else:
    # kraken rule if single-end data
    rule kraken2_SE:
        conda:
            "envs/kraken2.yaml"
        input:
            reads = config["input_reads_dir"] + "{ID}" + config["input_read_suffix"],
            kraken2_db_trigger = config["REF_DB_ROOT_DIR"] + config["kraken2_db_dir"] + "/" + config["KRAKEN2_TRIGGER_FILE"]
        output:
            main = config["kraken_outputs"] + "{ID}-kraken2-output.txt",
            report = config["kraken_outputs"] + "{ID}-kraken2-report.tsv",
            reads = config["output_reads_dir"] + "{ID}" + config["output_read_suffix"],
            summary = config["output_reads_dir"] + "{ID}-removal-info.tmp"
        params:
            uncompressed_reads_out_arg = config["output_reads_dir"] + "{ID}.fastq",
            kraken2_db_dir = config["REF_DB_ROOT_DIR"] + config["kraken2_db_dir"]
        resources:
            cpus = config["num_threads"]
        log:
            config["logs_dir"] + "{ID}-kraken2-run.log"
        shell:
            """
            kraken2 --db {params.kraken2_db_dir} --gzip-compressed --threads {resources.cpus} --use-names --output {output.main} --report {output.report} --unclassified-out {params.uncompressed_reads_out_arg} {input.reads} > {log} 2>&1

            # compressing outputs
            gzip {params.uncompressed_reads_out_arg}

            # renaming files
            mv {params.uncompressed_reads_out_arg}.gz {output.reads}

            # making summary info
            total_fragments=$(wc -l {output.main} | sed 's/^ *//' | cut -f 1 -d " ")
            fragments_retained=$(grep -w -m 1 "unclassified" {output.report} | cut -f 2)
            perc_removed=$(printf "%.2f\n" $(echo "scale=4; 100 - ${{fragments_retained}} / ${{total_fragments}} * 100" | bc -l))

            printf "{wildcards.ID}\t${{total_fragments}}\t${{fragments_retained}}\t${{perc_removed}}\n" > {output.summary}
            """


rule combine_summary_info:
    input:
        expand(config["output_reads_dir"] + "{ID}-removal-info.tmp", ID = sample_ID_list)
    output:
        config["output_reads_dir"] + "Human-read-removal-summary.tsv"
    shell:
        """
        cat <( printf "Sample_ID\tTotal_fragments_before\tTotal_fragments_after\tPercent_human_reads_removed\n" ) {input} > {output}
        rm {input}
        """


rule setup_kraken2_db:
    output:
        kraken2_db_trigger = config["REF_DB_ROOT_DIR"] + config["kraken2_db_dir"] + "/" + config["KRAKEN2_TRIGGER_FILE"]
    params:
        ref_db_root_dir = config["REF_DB_ROOT_DIR"],
        kraken2_db_dir = config["kraken2_db_dir"]
    log:
        "setup-kraken2-db.log"
    shell:
        """
        starting_dir=$(pwd)

        mkdir -p {params.ref_db_root_dir}
        cd {params.ref_db_root_dir}
        rm -rf {params.kraken2_db_dir}

        printf "### Setting up kraken2 reference database ###\n\n" > ${{starting_dir}}/{log} 2>&1

        printf "  Downloading GeneLab-built reference database:\n\n" >> ${{starting_dir}}/{log} 2>&1
        curl -L -o kraken2-human-db.tar.gz https://ndownloader.figshare.com/files/25627058 >> ${{starting_dir}}/{log} 2>&1

        printf "\n\n  Unpacking and decompressing database:\n\n" >> ${{starting_dir}}/{log} 2>&1
        tar -xzvf kraken2-human-db.tar.gz >> ${{starting_dir}}/{log} 2>&1
        rm kraken2-human-db.tar.gz

        # dealing with the fact that the download directory comes in with the default name, but the user might have changed it
        if [ {params.kraken2_db_dir} != "kraken2-human-db" ]; then
            mkdir -p {params.kraken2_db_dir}
            mv kraken2-human-db/* {params.kraken2_db_dir}
            rmdir -r kraken2-human-db
        fi

        cd ${{starting_dir}}

        touch {output}
        """
